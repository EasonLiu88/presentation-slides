{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14600\viewh17460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs20 \cf0 Presentation notes:\
\

\b Making a Call
\b0 \
URL Schemes - Old-school from XHTML-MP by OMA and still rocks.\
You can initiate a phone call or texting easily with a element.\
\

\b Location
\b0 \
Hardware has more than a few ways to detect your location:\
 - GPS satellites\
 - GSM/CDMA cell IDs\
 - A-GPS\
 - Wi-Fi base stations\
\

\b Supporting various screen sizes
\b0 \
Using Media-queries to control the presentation of content, without modifying the content itself.\
The idea of adaptive design has been around for a while, but the term RWD was a huge buzz last year.\
\

\b Coremob
\b0 \
Last year, W3C announced an industry-wide initiative, called Core Mobile Web Platform Community Group (CoreMob CG, for short), to help improve the mobile web.\
			\
The goal of the CoreMob is to accelerate the adoption of the Mobile Web as a compelling platform for the development of modern mobile Web applications. \
			\
In order to achieve this mission, the CG brings developers, equipment manufacturers, browser vendors, operators and other relevant members of the industry together.\
			\
The companies includes -\
Nokia, Samsung, AT&T, Verizon, Vodafone, Orange, Telef\'f3nica, KDDI, Softbank Qualcomm, Intel, Texas Instruments, Mozilla, Opera, Microsoft and Facebook and more.\
\

\b Coremob 2
\b0 \
... and we get together to:\
   1. Agree on core features developers can depend on. These will be defined by reference to a variety of other specifications from the W3C and other standards bodies.\
   2. Compile related conformance test suites.\
   3. Provide to W3C (and non-W3C) groups use cases, scenarios, and other input to drive successful mobile deployment.\
\

\b Coremob 3
\b0 \
The final CG specification is now on github.\
\

\b Coremob Camera
\b0 \
As a side project, my colleague from Nokia, John Kneeland, and a W3C rep for Facebook Tobie Langel (now a W3C fellow), and I have initiated to develop an open-source camera application built using Web technology. \
\

\b Sir Kneeland
\b0 \
So how did we started?\
Originally, the app was nothing more than a prototype I wrote for fun.  \
Around the time I was writing the prototype, Mark Zuckerberg made the infamous remark at the TechCrunch Disrupt, and soon it made to the shocking headlines all over on the InterWeb. It disturbed the web developer community, as well as raising skepticism among people.\
\
\

\b Project Goals
\b0 \
We have set three main goals to this project:\
\
   1. showcase the capabilities of the Web platform and the subset of features that Coremob is driving,\
   2. educate web developers about how to best use these technologies to build modern web applications, \
   3. help improve browsers by providing vendors with an app, which tests some of the key features and performance requirements of the platform.\
\
\

\b HTML Media Capture
\b0 \
Taking a picture is done by delegating to the native camera via HTML Media Capture. \
The native camera returns the pictures as a File object (from File API). \
\
Easy implementation for us - \
use the file upload input - the input element with the type attribute, 'file', then specify the accept attribute.\
The values of the attribute can be:\
 -images/* , video/*, or audio/*.\
			\
The capture attribute is a boolean attribute.\
If specified, a browser captures of media directly from the device's environment.	\
			\
(The actual demo is using the older spec, with the capture value of 'camera'. It is deprecated.)\
			\
- this is not WebRTC/ getUserMedia, by the way.\
\

\b File API
\b0 \
The image can also be displayed on the client-side without uploading. \
			\
When a user snap a photo, the API returns a file object list.\
- You can access the file object on a 'change' event.  (In this demo, I added a event listener.)\
- reading a FileReader object as an instance.\
- Then call readAsDataURL() to display the image in dataURL.\
\

\b Canvas
\b0 \
This is an example of how you paint the pixel data-\
- First you define the canvas, \
- and importing an photo into a canvas, by using drawImage() method to draw the image object.\
- Then, use getImageData() method to obtain an ImageData object containing a copy of the pixel data for a context.\
- Then "applying filter" by tweaking the pixel data, which I will talk a bit more on the next slide.\
- And finally, using putImageData() method, paint pixel data back into a context.\
\

\b Canvas Pixel Manipulation (Diagram)
\b0 \
- The 'data' property of ImageData stores the color info of an each pixel in the canvas.\
(In this diagram, the 9x9 pixel canvas).\
- Each pixel in the data array consists of 4 bytes values- red, green, blue, and alpha channel, and each of the R, G, B and A values can take values between 0 and 255.\
\

\b Canvas Pixel Manipulation (code)
\b0 \
This is an example for giving grayscale filter to the image on canvas.\
- See how the for loop iteration index skips by 4, and how I get each RGB values.\
(I don't use alpha in this case).\
- The magic equation you see here is something called "CIE 1931 luminance", and what it does is convert the pixels into grayscale that looks nice on human eyes.\
			\
- This calculation needs to be done on each canvas pixel.\
- Now you've noticed the operation that has to iterate is huge- lets say if your image is 100x100, you need to loop for 10,000 times! \
In the app, I have cropped off the large megapixel photo into 612x612. (it's 374,544 pixels!)\
IT IS SLOW!\
\

\b Faster Canvas
\b0 \
(32-bit pixel manipulation)\
- The example ==  traditional  8-bit operation.\
- The object returned by the data property of a Canvas ImageData, I was referring earlier, is 
\i CanvasPixelArray
\i0  in most mobile browsers currently, but will be deprecated in favor for 
\i Uint8ClampedArray
\i0 .\
- With the typed array, Uint8ClampedArray, you can use bitwise left-shifts, the 32-bit pixel manipulations, which is faster.\
		\
- As long as I know, Firefox and Opera Mobile has made the switch.\
   Chrome 18 - CanvasPixelArray\
   Android 4 - CanvasPixelArray\
   IE10 - CanvasPixelArray\
\

\b Canvas.toBlob\

\b0 Blob == binary large object\
...\
For non-supporting browsers, I needed to convert a canvas to a dataURL string once, then invoke the Blob constructor to finally convert it to blob.\
\

\b Blob URLs\

\b0 - The object URL represents the specified Blob object.\
- Creates a new object URL, whose lifetime is tied to the document in the window on which it was created. \
- Release the url with revokeObjectURL() if you no longer need them.\
\

\b  IndexedDB
\b0 \
- opening a DB\'85 \
\

\b IndexedDB (Prefixed)
\b0 \
\

\b Indexed DB - Spotty browser support\

\b0 - There are multiple specifications have been modified since, for example, Firefox has started supporting iDB. \
   - The basic support starts since ver4, setVersion() was deprecated at ver 10, \
   - and transaction mode has been switched to string from constant since 13.\
			\
- Blob, which in this case the filtered photo, is unfortunately not supported by Chrome at all. (used Base64 dataURL string)\'85\
\

\b XHR2 (FormData)
\b0 \
OK, let's send the photo to a server.\
	\
- XHR2 adds support for the new FormData interface.\
- The FormData object lets you compile a set of key/value pairs to send using XMLHttpRequest easily.\
\
- Here, I don't have a physical form element, however, I can just instantiate a FormData object then use append() method to append fields on the fly.\
\

\b XHR2 (events)
\b0 \
With XHR2, the data you can send is 
\i not
\i0  limited to DOMstring or XML.\
- The send() method can accept the binary data.\
			\
- Here, I am registering the some events-\
with XHR2 we have some cool feature like uploading progress events.\
\

\b XHR2 (Progress event)\

\b0 I only display the % in integer to fit the app UI, but it is cool if you use the HTML5 progress element to display.\
\

\b CORS
\b0 \
- Typically, a web application using XMLHttpRequest can only make HTTP requests to the domain it was loaded from, and 
\i not
\i0  to other domains.\
\
- CORS allows web applications on one domain to make cross domain AJAX requests to another domain.\
- To make simple CORS requests, the server only needs to add the header to its response.\
The example shown here is how to set on Apache server.\
\

\b Touch Events v1
\b0 \
- The Apple's touch event has been the de facto standard of the touch event for years.\
- Then there was a drama between Apple and the rest, who wanted standardized the touch events, regarding the specifications and legal concerns.\
\

\b Pointer Events
\b0 \
Then, the end of last year, Microsoft has submitted the alternative way of the touch event standard proposal to W3C.\
\
}